"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus integrations-api
 * Api principal do sistema Pegasus para integração com outros sistemas.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationPreviewEntityAvailabilityEnum = void 0;
exports.instanceOfIntegrationPreviewEntity = instanceOfIntegrationPreviewEntity;
exports.IntegrationPreviewEntityFromJSON = IntegrationPreviewEntityFromJSON;
exports.IntegrationPreviewEntityFromJSONTyped = IntegrationPreviewEntityFromJSONTyped;
exports.IntegrationPreviewEntityToJSON = IntegrationPreviewEntityToJSON;
exports.IntegrationPreviewEntityToJSONTyped = IntegrationPreviewEntityToJSONTyped;
/**
 * @export
 */
exports.IntegrationPreviewEntityAvailabilityEnum = {
    Available: 'AVAILABLE',
    Soon: 'SOON'
};
/**
 * Check if a given object implements the IntegrationPreviewEntity interface.
 */
function instanceOfIntegrationPreviewEntity(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('subtitle' in value) || value['subtitle'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('iconName' in value) || value['iconName'] === undefined)
        return false;
    if (!('availability' in value) || value['availability'] === undefined)
        return false;
    return true;
}
function IntegrationPreviewEntityFromJSON(json) {
    return IntegrationPreviewEntityFromJSONTyped(json, false);
}
function IntegrationPreviewEntityFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'title': json['title'],
        'subtitle': json['subtitle'],
        'description': json['description'],
        'copy': json['copy'] == null ? undefined : json['copy'],
        'content': json['content'] == null ? undefined : json['content'],
        'iconName': json['iconName'],
        'availability': json['availability'],
    };
}
function IntegrationPreviewEntityToJSON(json) {
    return IntegrationPreviewEntityToJSONTyped(json, false);
}
function IntegrationPreviewEntityToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'title': value['title'],
        'subtitle': value['subtitle'],
        'description': value['description'],
        'copy': value['copy'],
        'content': value['content'],
        'iconName': value['iconName'],
        'availability': value['availability'],
    };
}
