/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus integrations-api
 * Api principal do sistema Pegasus para integração com outros sistemas.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  HealthResponseDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    HealthResponseDtoFromJSON,
    HealthResponseDtoToJSON,
} from '../models/index';

/**
 * HealthApi - interface
 * 
 * @export
 * @interface HealthApiInterface
 */
export interface HealthApiInterface {
    /**
     * 
     * @summary Gera um erro de teste.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    errorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Gera um erro de teste.
     */
    error(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Verifica o status do serviço.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponseDto>>;

    /**
     * Verifica o status do serviço.
     */
    health(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponseDto>;

    /**
     * 
     * @summary Verifica o status do serviço.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponseDto>>;

    /**
     * Verifica o status do serviço.
     */
    healthPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponseDto>;

}

/**
 * 
 */
export class HealthApi extends runtime.BaseAPI implements HealthApiInterface {

    /**
     * Gera um erro de teste.
     */
    async errorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/error`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gera um erro de teste.
     */
    async error(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errorRaw(initOverrides);
    }

    /**
     * Verifica o status do serviço.
     */
    async healthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseDtoFromJSON(jsonValue));
    }

    /**
     * Verifica o status do serviço.
     */
    async health(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponseDto> {
        const response = await this.healthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verifica o status do serviço.
     */
    async healthPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseDtoFromJSON(jsonValue));
    }

    /**
     * Verifica o status do serviço.
     */
    async healthPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponseDto> {
        const response = await this.healthPostRaw(initOverrides);
        return await response.value();
    }

}
