/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus integrations-api
 * Api principal do sistema Pegasus para integração com outros sistemas.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountTransactionsSyncJobPayload,
  OnBankAccountCreatedPayload,
  RawAccountEntity,
} from '../models/index';
import {
    AccountTransactionsSyncJobPayloadFromJSON,
    AccountTransactionsSyncJobPayloadToJSON,
    OnBankAccountCreatedPayloadFromJSON,
    OnBankAccountCreatedPayloadToJSON,
    RawAccountEntityFromJSON,
    RawAccountEntityToJSON,
} from '../models/index';

export interface FindAllAccountsRequest {
    itemId: string;
}

export interface StartAccountTransactionsSyncRequest {
    onBankAccountCreatedPayload: OnBankAccountCreatedPayload;
}

export interface SyncAccountTransactionsRequest {
    accountTransactionsSyncJobPayload: AccountTransactionsSyncJobPayload;
}

/**
 * AccountsApi - interface
 * 
 * @export
 * @interface AccountsApiInterface
 */
export interface AccountsApiInterface {
    /**
     * 
     * @summary Find all accounts for a given item
     * @param {string} itemId The item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    findAllAccountsRaw(requestParameters: FindAllAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawAccountEntity>>>;

    /**
     * Find all accounts for a given item
     */
    findAllAccounts(requestParameters: FindAllAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawAccountEntity>>;

    /**
     * 
     * @summary Start account transactions sync
     * @param {OnBankAccountCreatedPayload} onBankAccountCreatedPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    startAccountTransactionsSyncRaw(requestParameters: StartAccountTransactionsSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Start account transactions sync
     */
    startAccountTransactionsSync(requestParameters: StartAccountTransactionsSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Process account transactions sync job
     * @param {AccountTransactionsSyncJobPayload} accountTransactionsSyncJobPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    syncAccountTransactionsRaw(requestParameters: SyncAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Process account transactions sync job
     */
    syncAccountTransactions(requestParameters: SyncAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI implements AccountsApiInterface {

    /**
     * Find all accounts for a given item
     */
    async findAllAccountsRaw(requestParameters: FindAllAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawAccountEntity>>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling findAllAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/open-finance/items/{itemId}/accounts`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RawAccountEntityFromJSON));
    }

    /**
     * Find all accounts for a given item
     */
    async findAllAccounts(requestParameters: FindAllAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawAccountEntity>> {
        const response = await this.findAllAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start account transactions sync
     */
    async startAccountTransactionsSyncRaw(requestParameters: StartAccountTransactionsSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['onBankAccountCreatedPayload'] == null) {
            throw new runtime.RequiredError(
                'onBankAccountCreatedPayload',
                'Required parameter "onBankAccountCreatedPayload" was null or undefined when calling startAccountTransactionsSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/internal/open-finance/accounts/on/bank-account-created`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnBankAccountCreatedPayloadToJSON(requestParameters['onBankAccountCreatedPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start account transactions sync
     */
    async startAccountTransactionsSync(requestParameters: StartAccountTransactionsSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startAccountTransactionsSyncRaw(requestParameters, initOverrides);
    }

    /**
     * Process account transactions sync job
     */
    async syncAccountTransactionsRaw(requestParameters: SyncAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountTransactionsSyncJobPayload'] == null) {
            throw new runtime.RequiredError(
                'accountTransactionsSyncJobPayload',
                'Required parameter "accountTransactionsSyncJobPayload" was null or undefined when calling syncAccountTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/internal/queues/account-transactions-sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTransactionsSyncJobPayloadToJSON(requestParameters['accountTransactionsSyncJobPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Process account transactions sync job
     */
    async syncAccountTransactions(requestParameters: SyncAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncAccountTransactionsRaw(requestParameters, initOverrides);
    }

}
