/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus integrations-api
 * Api principal do sistema Pegasus para integração com outros sistemas.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CacheGetResponseDto,
  CacheSetDto,
  ExceptionResponseEntity,
} from '../models/index';
import {
    CacheGetResponseDtoFromJSON,
    CacheGetResponseDtoToJSON,
    CacheSetDtoFromJSON,
    CacheSetDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

export interface SetCacheValueRequest {
    cacheSetDto: CacheSetDto;
}

/**
 * CacheApi - interface
 * 
 * @export
 * @interface CacheApiInterface
 */
export interface CacheApiInterface {
    /**
     * 
     * @summary Get string value from cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CacheApiInterface
     */
    getCacheValueRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CacheGetResponseDto>>;

    /**
     * Get string value from cache
     */
    getCacheValue(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CacheGetResponseDto>;

    /**
     * 
     * @summary Set string value in cache with 10-second TTL
     * @param {CacheSetDto} cacheSetDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CacheApiInterface
     */
    setCacheValueRaw(requestParameters: SetCacheValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Set string value in cache with 10-second TTL
     */
    setCacheValue(requestParameters: SetCacheValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CacheApi extends runtime.BaseAPI implements CacheApiInterface {

    /**
     * Get string value from cache
     */
    async getCacheValueRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CacheGetResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/cache`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CacheGetResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get string value from cache
     */
    async getCacheValue(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CacheGetResponseDto> {
        const response = await this.getCacheValueRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set string value in cache with 10-second TTL
     */
    async setCacheValueRaw(requestParameters: SetCacheValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cacheSetDto'] == null) {
            throw new runtime.RequiredError(
                'cacheSetDto',
                'Required parameter "cacheSetDto" was null or undefined when calling setCacheValue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/cache`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CacheSetDtoToJSON(requestParameters['cacheSetDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set string value in cache with 10-second TTL
     */
    async setCacheValue(requestParameters: SetCacheValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setCacheValueRaw(requestParameters, initOverrides);
    }

}
